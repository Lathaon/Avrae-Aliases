# pronouns = '2c4012a3-accd-4fcf-a5e2-30bb51800c4e'
#
# A module to help construct text using the character's pronouns. Allows for
# multiple possibilities for those with more than one of each kind.
#
# As backwards-compatible as it can be.
#
# ===== Functions =====
#
# they(default="they"): Returns a subject pronoun (he/she/they).
# They(default="They"): Capitalized version of the above.
#
# them(default="them"): Returns an object pronoun (her/him/them).
# Them(default="Them"): Capitalized version of the above.
#
# their(default="their"): Returns a possessive determiner (their/her/his).
# Their(default="Their"): Capitalized version of the above.
#
# theirs(default="theirs"): Returns an independent possessive pronoun
#     (his/theirs/hers).
# Theirs(default="Theirs"): Capitalized version of the above.
#
# gendered(default="gender-neutral"): Returns an adjective describing the pronouns
#     (female, gender-neutral, male).
# Gendered(default="Gender-neutral"): Capitalized version of the above.
#
# verb(singular, plural): Returns the plural text if the last pronoun returned was
#     "they", or the singular text otherwise.
# 
# ===== Notes =====
#
# A character's pronouns are stored in the following cvars:
# - they
# - them
# - their
# - theirs
# - ungendered
#
# A character with multiple possible pronouns should separate them with a forward slash.
# Example: !cvar they he/they
# This would cause they() to randomly return "he" or "they" each time.

_pc = character()

_pronouns = {
    pronoun: _pc.get_cvar(pronoun).split('/')
    for pronoun in ('they', 'them', 'their', 'theirs')
    if pronoun in _pc.cvars
}
if 'ungendered' in _pc.cvars:
    _pronouns["gendered"] = _pc.get_cvar('ungendered')

# Had to make it a list because for some reason it didn't work as a bool.
_was_plural = [False]

def _capitalize(txt):
    return txt[:1].upper() + txt[1:]

def they(default = "they"):
    """
    Returns a subject pronoun (he/she/they).
    """
    if "they" in _pronouns:
        out = randchoice(_pronouns.they)
    else:
        out = default
    _was_plural[0] = out == 'they'
    return out

def They(default = "They"):
    """
    Returns a capitalized subject pronoun (He/She/They).
    """
    return _capitalize(they(default))

def them(default = "them"):
    """
    Returns an object pronoun (her/him/them).
    """
    if "them" in _pronouns:
        out = randchoice(_pronouns.them)
    else:
        out = default
    return out

def Them(default = "Them"):
    """
    Returns a capitalized object pronoun (Her/Him/Them).
    """
    return _capitalize(them(default))

def their(default = "their"):
    """
    Returns a possessive determiner (her/his/their).
    """
    if "their" in _pronouns:
        out = randchoice(_pronouns.their)
    else:
        out = default
    return out

def Their(default = "Their"):
    """
    Returns a possessive determiner (Her/His/Their).
    """
    return _capitalize(their(default))

def theirs(default = "theirs"):
    """
    Returns an independent possessive pronoun (hers/his/theirs).
    """
    if "theirs" in _pronouns:
        out = randchoice(_pronouns.theirs)
    else:
        out = default
    return out

def Theirs(default = "Theirs"):
    """
    Returns a capitalized independent possessive pronoun (Hers/His/Theirs).
    """
    return _capitalize(theirs(default))

def gendered(default = "gender-neutral"):
    """
    Returns an adjective describing the pronouns (female, male, gender-neutral).
    """
    return _pronouns.get("gendered", default)

def Gendered(default = "Gender-neutral"):
    """
    Returns a capitalized adjective describing the pronouns (female, male,
    gender-neutral).
    """
    return _capitalize(gendered(default))

def verb(singular, plural):
    """
    Returns the plural text if the last pronoun returned was "they", or the
    singular text otherwise.
    """
    return plural if _was_plural[0] else singular