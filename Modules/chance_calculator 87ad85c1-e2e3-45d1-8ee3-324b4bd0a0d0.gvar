# chance_calculator = "87ad85c1-e2e3-45d1-8ee3-324b4bd0a0d0"
#
# A module for calculating the success chances of a d20 roll.
#
# Supports advantage, disadvantage, Elven Accuracy, halfling luck and
# reliable talent.
#
# Supports simple constant and dice-based bonuses.
#
# Does not support anything complicated with the bonus dice, such as
# multiplication or division, selecting the lowest/highest, or applying
# a minimum/maximum/reroll.
#
# ===== Functions =====
#
# get_chance(d20_str, bonus_str, dc): Calculates the probability that a
#     given d20 roll will equal or exceed the DC.
#
# ===== Constants =====
#
# D20_PROBABILITY: A dict of probability lookup tables for each possible
#     d20_str that is supported by the module.


D20_PROBABILITY = load_yaml("""
1d20:           [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]
2d20kh1:        [0.0025, 0.0075, 0.0125, 0.0175, 0.0225, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0925, 0.0975]
2d20kl1:        [0.0975, 0.0925, 0.0875, 0.0825, 0.0775, 0.0725, 0.0675, 0.0625, 0.0575, 0.0525, 0.0475, 0.0425, 0.0375, 0.0325, 0.0275, 0.0225, 0.0175, 0.0125, 0.0075, 0.0025]
1d20ro1:        [0.0025, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525]
2d20ro1kh1:     [0.00000625, 0.00301875, 0.00853125, 0.01404375, 0.01955625, 0.02506875, 0.03058125, 0.03609375, 0.04160625, 0.04711875, 0.05263125, 0.05814375, 0.06365625, 0.06916875, 0.07468125, 0.08019375, 0.08570625, 0.09121875, 0.09673125, 0.10224375]
2d20ro1kl1:     [0.00499375, 0.10198125, 0.09646875, 0.09095625, 0.08544375, 0.07993125, 0.07441875, 0.06890625, 0.06339375, 0.05788125, 0.05236875, 0.04685625, 0.04134375, 0.03583125, 0.03031875, 0.02480625, 0.01929375, 0.01378125, 0.00826875, 0.00275625]
1d20mi10:       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]
2d20kh1mi10:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0.0525, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0925, 0.0975]
2d20kl1mi10:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.75, 0.0475, 0.0425, 0.0375, 0.0325, 0.0275, 0.0225, 0.0175, 0.0125, 0.0075, 0.0025]
1d20ro1mi10:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.475, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525, 0.0525]
2d20ro1kh1mi10: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.225625, 0.05263125, 0.05814375, 0.06365625, 0.06916875, 0.07468125, 0.08019375, 0.08570625, 0.09121875, 0.09673125, 0.10224375]
2d20ro1kl1mi10: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.724375, 0.05236875, 0.04685625, 0.04134375, 0.03583125, 0.03031875, 0.02480625, 0.01929375, 0.01378125, 0.00826875, 0.00275625]
3d20kh1:        [0.000125, 0.000875, 0.002375, 0.004625, 0.007625, 0.011375, 0.015875, 0.021125, 0.027125, 0.033875, 0.041375, 0.049625, 0.058625, 0.068375, 0.078875, 0.090125, 0.102125, 0.114875, 0.128375, 0.142625]
""")

def get_chance(d20_str, bonus_str, dc):
    """
    Calculates the probability that a d20 roll will equal or exceed the DC.
    :arg str d20_str: the d20 component without any bonuses or annotations, e.g. "2d20kh1".
    :arg str bonus_str: any bonuses, e.g. "+5 +1d4[guidance]"
    :arg int dc: the DC to compare against.
    :return: the chance of success.
    :rtype: float
    """
    prob_table = D20_PROBABILITY[d20_str].copy()

    # The lowest possible result (index 0).
    lowest = 1

    try:
        bonuses = _extract_bonuses(vroll(bonus_str+"+0").raw)
    except "RollSyntaxError":
        err(f"Invalid bonuses provided to the Chance Calculator module: {bonus_str}")

    for bonus in bonuses:
        if typeof(bonus) == "int":
            # A flat bonus just shifts everything up/down by that value.
            lowest += int(bonus)
        else:
            # A dice string is more complicated. It's probably simplest
            # to deal with it one die at a time.
            max_roll = bonus.num * bonus.size
            if bonus.sign < 0:
                lowest -= max_roll
                prob_table[:0] = [0] * max_roll
                for _ in range(bonus.num):
                    # Subtracting a die takes the chance of each number
                    # and spreads it across a range of numbers below it.
                    # We need to go in ascending order so the higher numbers
                    # will bubble down as we go.
                    for i in range(bonus.size, len(prob_table)):
                        chance_divided = prob_table[i] / bonus.size
                        prob_table[i] = 0
                        for j in range(i-bonus.size, i):
                            prob_table[j] += chance_divided
            else:
                prob_table.extend([0] * max_roll)
                for _ in range(bonus.num):
                    # Adding a die takes the chance of each number
                    # and spreads it across a range of numbers above it.
                    # We need to go in descending order so the lower numbers
                    # will bubble up as we go.
                    for i in range(len(prob_table) - bonus.size - 1, -1, -1):
                        chance_divided = prob_table[i] / bonus.size
                        prob_table[i] = 0
                        for j in range(i+1, i+bonus.size+1):
                            prob_table[j] += chance_divided

    if lowest >= dc:
        return 1
    else:
        return sum(prob_table[dc - lowest:])


def _extract_bonuses(node, sign = 1):
    """
    Builds a list of bonuses from a dice tree.
    """
    match typeof(node):
        case "Dice"|"Set"|"Parenthical" if node.operations: 
            err("Set operations are not supported by the Chance Calculator module")
        case "Expression"|"Set":
            return [bonus for child in node.children for bonus in _extract_bonuses(child, sign)]
        case "Dice":
            return [{"sign": sign, "num": node.num, "size": node.size}]
        case "Literal":
            return [int(node)]
        case "BinOp":
            if node.op == "+":
                return _extract_bonuses(node.left, sign) + _extract_bonuses(node.right, sign)
            elif node.op == "-":
                return _extract_bonuses(node.left, sign) + _extract_bonuses(node.right, -sign)
            else:
                err(f"The {node.op} operator is not supported by the Chance Calculator module")
        case "UnOp":
            if node.op == "+":
                return _extract_bonuses(node.value, sign)
            elif node.op == "-":
                return _extract_bonuses(node.value, -sign)
            else:
                err(f"The {node.op} operator is not supported by the Chance Calculator module")
