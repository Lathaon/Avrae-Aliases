multiline
<drac2>
pc = character()

data_export = load_json(get_uvar('data_export', '{}'))

match &ARGS&:
	case [upstream, *args]:
		if upstream not in data_export:
			err(f"You didn't specify a character for whom data has been exported. You must use the exact command you were given by `{ctx.prefix}{ctx.alias} export`.")
	case []:
		err(f"You didn't specify a character for whom data has been exported. You must use the exact command you were given by `{ctx.prefix}{ctx.alias} export`.")

# The value of counter.min if there is no user-set minimum.
NO_MIN = -2_147_483_648

# The value of counter.max if there is no user-set maximum.
NO_MAX =  2_147_483_647

exported_data = load_json(data_export[upstream])

commands = []

uvars_to_delete = [exported_data.csettings]

if 'nocc' not in args:
	counters = ""
	for uvar_name in exported_data.cc:
		counters += get_uvar(uvar_name, "")
		uvars_to_delete.append(uvar_name)
	counters = load_json(counters)
	for counter in counters:
		pc.create_cc(
			counter.name,
			minVal = None if counter.min == NO_MIN else counter.min,
			maxVal = None if counter.max == NO_MAX else counter.max,
			reset = counter.reset_on,
			dispType = counter.display_type,
			reset_to = counter.reset_to,
			reset_by = counter.reset_by,
			title = counter.title,
			desc = counter.desc,
			initial_value = counter.value
		)
	commands.append(f'{ctx.prefix}echo A total of {len(counters)} counters have been imported!')

if 'nocvars' in args:
	for i, cvar in enumerate(exported_data.cvars):
		uvar_name = f'{upstream}_c_{i}'
		uvars_to_delete.append(uvar_name)
else:
	for i, cvar in enumerate(exported_data.cvars):
		uvar_name = f'{upstream}_c_{i}'
		pc.set_cvar(cvar, get_uvar(uvar_name))
		uvars_to_delete.append(uvar_name)
	commands.append(f'{ctx.prefix}echo A total of {len(exported_data.cvars)} cvars have been imported!')

if 'noattacks' in args:
	for weapon_uvar in exported_data.weapons:
		uvars_to_delete.append(weapon_uvar)
else:
	weapons_to_add = []
	for weapon_uvars in exported_data.weapons:
		if typeof(weapon_uvars) == "SafeList":
			weapon = load_json("".join(get_uvar(weapon_uvar) for weapon_uvar in weapon_uvars))
			uvars_to_delete.extend(weapon_uvars)
		else:
			weapon = load_json(get_uvar(weapon_uvars))
			uvars_to_delete.append(weapon_uvars)
		if not any([attack.name == weapon.name for attack in pc.attacks]):
			weapons_to_add.append(weapon)

	if weapons_to_add:
		commands.append(f'{ctx.prefix}a import {dump_json(weapons_to_add)}')

if 'nospells' in args:
	for uvar_name in exported_data.spells:
		uvars_to_delete.append(uvar_name)
else:
	all_spells = ""
	for uvar_name in exported_data.spells:
		all_spells += get_uvar(uvar_name, '')
		uvars_to_delete.append(uvar_name)
	
	all_spells = load_json(all_spells)

	for spell_name in all_spells:
		if spell_name not in pc.spellbook:
			commands.append(f'{ctx.prefix}sb add "{spell_name}" {all_spells[spell_name]}')

if 'nocsettings' not in args:
	for csetting_name, csetting_value in load_json(get_uvar(exported_data.csettings)).items():
		if csetting_value != pc.csettings[csetting_name]:
			if csetting_value is None:
				commands.append(f'{ctx.prefix}csettings {csetting_name} reset')
			elif csetting_name == 'color':
				commands.append(f'{ctx.prefix}csettings color {csetting_value:X}')
			else:
				commands.append(f'{ctx.prefix}csettings {csetting_name} {csetting_value}')

for uvar_name in uvars_to_delete:
	delete_uvar(uvar_name)

data_export.pop(upstream)

if not data_export:
	delete_uvar('data_export')
else:
	set_uvar('data_export', dump_json(data_export))

if len(commands) > 20:
	set_uvar('data_export_commands', dump_json(commands[19:]))
	commands = commands[:19] + [f"{ctx.prefix}echo :warning: Data import could not be finished yet! Please run `{ctx.prefix}{ctx.alias} continue`"]

return '\n'.join(commands)
</drac2>
