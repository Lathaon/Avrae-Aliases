<drac2>
using(
    embeds = '72fea181-ba03-4cb4-8edf-1f3bc5a49578',
    fuzzy = '6431690e-ce47-4baa-bb3b-ba751e1a1817'
)

args = &ARGS& or ["Basic Rules"]

race_db = load_yaml(get_gvar('4103493a-3ad4-4e8d-8072-88973f55bacc'))

def stringify_race(race, subraces):
	if subraces:
		return f'**{race}** ({", ".join(subraces)})'
	else:
		return f'**{race}**'

def stringify_book(book):
	return f'{["which require access to","freely available from"][book.get("free", False)]} {"the " * (not book.get("proper", True))}*{book.name}*'

match [
	sourcebook
	for arg in args
	for sourcebook in fuzzy.get_matches_with_function(arg, race_db, lambda x: x.name.lower())
	if 'races' in sourcebook
]:
	case []:
		err(f"Could not find any books matching `{' '.join(args)}` that contain races or subraces.")
	case [sourcebook, *_]:
		embed = {
		    "title": "Wondering what races and subraces a book contains?",
		    "desc": f"Here's the list of races {stringify_book(sourcebook)}.",
		    "footer": f"{ctx.prefix}{ctx.alias} races <book name> | @Lathaon#6649",
			"fields": [
				{
					'title': sourcebook.name,
					'body': '\n'.join(
						stringify_race(race, sourcebook.races[race])
						for race in sourcebook.races
					)
				}
			]
		}

		return embeds.get_output(embed)
</drac2>